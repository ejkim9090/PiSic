<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="MyMusic">

<resultMap type="MyMusic" id="MyMusicResultMap">
	<result column="l_no" property="l_no" />
	<result column="m_id" property="m_id" />
	<result column="l_name" property="l_name" />
	<result column="l_private_yn" property="l_private_yn" />
	<result column="l_image" property="l_image" />
	<collection column="{m_id=m_id, l_no=l_no}" property="sounds" select="selectPlaylistDetailSound"></collection>
</resultMap>

<!-- <resultMap type="Sound" id="mySoundResultMap"> <result column="s_no" 
	property="s_no"/> <result column="a_no" property="a_no"/> <result column="s_name" 
	property="s_name"/> <result column="s_lyrics1" property="s_lyrics1"/> <result 
	column="s_lyrics2" property="s_lyrics2"/> <result column="s_age_yn" property="s_age_yn"/> 
	<result column="s_path" property="s_path"/> <result column="g_no" property="g_no"/> 
	<result column="cnt_like" property="cnt_like"/> <result column="a_cover" 
	property="a_cover"/> <result column="a_name" property="a_name"/> <result 
	column="g_name" property="g_name"/> <collection column="{m_id=m_id, l_no=l_no}" 
	property="singers" select="mySoundSingerList"></collection> <collection column="{m_id=m_id, 
	l_no=l_no}" property="sound_writers" select="mySoundWriterList"></collection> 
	<collection column="{m_id=m_id, l_no=l_no}" property="sound_composers" select="mySoundComposerList"></collection> 
	</resultMap> -->

<resultMap type="Sound" id="soundResultMap">
	<result column="s_no" property="s_no" />
	<result column="a_no" property="a_no" />
	<result column="s_name" property="s_name" />
	<result column="s_lyrics1" property="s_lyrics1" />
	<result column="s_lyrics2" property="s_lyrics2" />
	<result column="s_age_yn" property="s_age_yn" />
	<result column="s_path" property="s_path" />
	<result column="g_no" property="g_no" />
	<result column="cnt_like" property="cnt_like" />
	<result column="a_cover" property="a_cover" />
	<result column="a_name" property="a_name" />
	<result column="g_name" property="g_name" />
	<collection column="{a_no=a_no, s_no=s_no}" property="singers" select="soundSingerList"></collection>
</resultMap>

<!-- 내 플레이 리스트 목록 -->
<select id="selectPlaylist" resultType="MyMusic">
	<![CDATA[
	select * from playlist where m_id = #{m_id} and l_no > 0
	]]>
</select>

<!-- 플레이 리스트에 노래 담기 -->
<insert id="insertSound" parameterType="list">
	insert all
	<foreach collection="list" item="item" index="index">
		into playlist_content 
			values (#{item.l_no}, #{item.m_id}, #{item.s_no},
			#{item.a_no}
			, (select nvl(max(s_order),0)+#{index}+1 from playlist_content 
				where m_id=#{item.m_id} and l_no=#{item.l_no}))
	</foreach>
	select * from dual
</insert>

<!-- 플레이 리스트 삭제 -->
<delete id="deletePlaylist" parameterType="list">
	delete from playlist
	where
	<foreach collection="list" item="item" separator="or">
		(m_id = #{item.m_id} and l_no = #{item.l_no})
	</foreach>
</delete>

<!-- 내 플레이 리스트 상세조회 -->
<select id="selectPlaylistDetail" parameterType="MyMusic" resultMap="MyMusicResultMap">
	select playlist.*, (select count(*) from playlist_content where m_id=#{m_id}
	and l_no=#{l_no}) sound_cnt
	, member.m_id, member.m_nickname
	from playlist playlist
	join member member on member.m_id = playlist.m_id
	where playlist.m_id=#{m_id} and playlist.l_no=#{l_no}
</select>

<!-- 내 플레이 리스트 상세조회 - 담긴 곡 목록 -->
<select id="selectPlaylistDetailSound" parameterType="map" resultMap="soundResultMap">
	select sound.s_no, sound.a_no, sound.s_name, sound.s_path, album.a_cover,
	album.a_name
	from playlist_content playlist_content
	join sound sound on playlist_content.s_no = sound.s_no and
	playlist_content.a_no = sound.a_no
	join album album on sound.a_no = album.a_no
	where playlist_content.m_id = #{m_id} and playlist_content.l_no = #{l_no}
	order by s_order
</select>

<!-- 플리 곡 - 가수 -->
<!-- <select id="mySoundSingerList" parameterType="map" resultType="Singer"> 
	select artist.artist_name, artist.artist_no from sound sound join singer 
	singer on sound.s_no=singer.s_no and sound.a_no=singer.a_no join artist artist 
	on singer.artist_no = artist.artist_no join playlist_content playlist_content 
	on playlist_content.s_no = sound.s_no and playlist_content.a_no = sound.a_no 
	where playlist_content.m_id=#{m_id} and playlist_content.l_no=#{l_no} </select> -->

<!-- 플리 곡 - 작사가 -->
<!-- <select id="mySoundWriterList" parameterType="map" resultType="Writer"> 
	select artist.artist_name from sound sound join sound_writer writer on sound.s_no 
	= writer.s_no and sound.a_no = writer.a_no join artist artist on writer.artist_no 
	= artist.artist_no join playlist_content playlist_content on playlist_content.s_no 
	= sound.s_no and playlist_content.a_no = sound.a_no where playlist_content.m_id=#{m_id} 
	and playlist_content.l_no=#{l_no} </select> -->

<!-- 플리 곡 - 작곡가 -->
<!-- <select id="mySoundComposerList" parameterType="map" resultType="Composer"> 
	select artist.artist_name from sound sound join sound_composer composer on 
	sound.s_no = composer.s_no and sound.a_no = composer.a_no join artist artist 
	on composer.artist_no = artist.artist_no join playlist_content playlist_content 
	on playlist_content.s_no = sound.s_no and playlist_content.a_no = sound.a_no 
	where playlist_content.m_id=#{m_id} and playlist_content.l_no=#{l_no} </select> -->

<!-- 플레이 리스트 만들기 -->
<insert id="insertPlaylist" parameterType="hashmap">
	insert all
	into playlist values
	( (select nvl(max(l_no),0)+1 from playlist where m_id=#{MyMusic.m_id} )
	, #{MyMusic.m_id}, #{MyMusic.l_name}, #{MyMusic.l_private_yn},
	#{MyMusic.l_image})

	<foreach collection="soundList" item="item" index="index">
		into playlist_content values
		( (select nvl(max(l_no),0)+1 from playlist where m_id=#{MyMusic.m_id}
		)
		, #{MyMusic.m_id}, #{item.s_no}, #{item.a_no}
		, (select nvl(max(s_order),0)+#{index}+1 from playlist_content 
				where m_id=#{MyMusic.m_id} and l_no=(select nvl(max(l_no),0)+1 from playlist where m_id=#{MyMusic.m_id}))
		)
	</foreach>

	select * from dual
</insert>

<!-- 플레이 리스트 만들기 - 담을 곡 들고가기 -->
<select id="selectSoundList" parameterType="Sound" resultMap="soundResultMap">
	select sound.s_name, album.a_cover, sound.a_no, sound.s_no
	from sound sound
	join album album on sound.a_no = album.a_no
	where sound.a_no = #{a_no} and sound.s_no = #{s_no}
</select>

<!-- 플레이 리스트에 담긴 곡 목록 -ajax -->
<select id="selectPlaylistSound" parameterType="MyMusic" resultMap="soundResultMap">
	select sound.s_no, sound.a_no, sound.s_name, sound.s_path, album.a_cover
	from playlist_content playlist_content
	join sound sound on playlist_content.s_no = sound.s_no and
	playlist_content.a_no = sound.a_no
	join album album on sound.a_no = album.a_no
	where playlist_content.m_id = #{m_id} and playlist_content.l_no = #{l_no}
	order by s_order
</select>

<!-- 최근 들은 곡 --><!-- TODO 날짜 수정해야돼, -->
<select id="selectSoundRecent" resultMap="soundResultMap">
	select sound.s_no, sound.a_no, sound.s_name, sound.s_path
	, album.a_cover, album.a_name
	from sound sound
	join playinfo pinfo on sound.s_no = pinfo.s_no and sound.a_no = pinfo.a_no
	join album album on sound.a_no = album.a_no
	where pinfo.m_id = #{m_id} and pinfo.p_date BETWEEN sysdate-100 and sysdate
	group by sound.s_no, sound.a_no, sound.s_name, sound.s_path
	, album.a_cover, album.a_name
</select>

<!-- 자주 들은 곡 -->
<select id="selectSoundOften" resultMap="soundResultMap">
	select rownum chart, t1.s_no, t1.a_no, t1.cnt
		, sound.s_name, sound.s_path, album.a_cover, album.a_name 
		from (select s_no, a_no, count(*) cnt
       			from playinfo group by m_id, a_no, s_no having m_id=#{m_id} order by cnt desc) t1 
		        join sound sound on t1.a_no = sound.a_no and t1.s_no = sound.s_no
		        join album album on sound.a_no = album.a_no
	<![CDATA[
	where rownum <= 10
	]]>
</select>

<!-- 좋아요 곡 -->
<select id="selectSoundLike" resultMap="soundResultMap">
	select sound.s_no, sound.a_no, sound.s_name, sound.s_path, album.a_cover
	from sound sound
	join album album on sound.a_no = album.a_no
	join sound_like sound_like on sound.s_no = sound_like.s_no and sound.a_no
	= sound_like.a_no
	where sound_like.m_id = #{m_id}
	order by like_date desc
</select>

<!-- 최근 들은 곡, 자주 들은 곡, 좋아요 곡 - 가수 -->
<select id="soundSingerList" parameterType="map" resultType="Singer">
	select artist.artist_name, artist.artist_no
	from sound sound
	join singer singer on sound.s_no=singer.s_no and sound.a_no=singer.a_no
	join artist artist on singer.artist_no = artist.artist_no
	where sound.a_no=#{a_no} and sound.s_no=#{s_no}
</select>

<!-- 내가 좋아하는 아티스트 목록 -->
<select id="selectArtistLikeList" resultType="Artist">
	select t1.like_cnt, art_like.artist_no, art.artist_name, art.artist_profile
	from artist_like art_like
	join artist art on art_like.artist_no = art.artist_no
	join (select count(*) like_cnt, artist_no from artist_like group by
	artist_no) t1 on art.artist_no = t1.artist_no
	where m_id = #{m_id}
	order by like_date desc
</select>

<!-- 아티스트 좋아요 확인 -->
<select id="checkArtistLike" parameterType="Artist" resultType="int">
	select count(*) from artist_like 
	where m_id = #{m_id}
	and artist_no = #{artist_no} 
</select>

<!-- 아티스트 좋아요 -->
<insert id="insertArtistLike">
	insert into artist_like
	(artist_no, m_id, like_date)
	values
	(#{artist_no}, #{m_id}, default)
</insert>

<!-- 아티스트 좋아요 취소 -->
<delete id="deleteArtistLike" parameterType="Artist">
	delete from artist_like
	where m_id = #{m_id} and artist_no = #{artist_no}
</delete>

<!-- 좋아하는 노래 목록 -->
<select id="selectSoundLikeList" resultMap="soundResultMap">
	select s_name, a_no, s_no, s_path, a_cover, a_name, cnt_like
	from view_like_sound_list
	where m_id = #{m_id}
	order by like_date desc
</select>

<!-- 좋아하는 노래 목록 총 갯수 -->
<select id="selectSoundLikeTotalCnt" resultType="int">
	select count(*) from sound_like
	where m_id = #{m_id}
</select>

<!-- 촤근 들은 노래 목록 총 갯수 --><!-- TODO 날짜 변경해야돼 -->
<select id="selectSoundRecentTotalCnt" resultType="int">
	select count(*) recent_cnt from
	(select DISTINCT s_no, a_no from playinfo
	where m_id=#{m_id} and p_date BETWEEN sysdate-100 and sysdate)
</select>
	
<!-- 플레이리스트 수록곡 삭제하기 -->
<delete id="deletePlaylistSound" parameterType="MyMusic">
	delete from playlist_content where m_id=#{m_id} and l_no=#{l_no}
</delete>
	
<!-- 플레이리스트 정보 변경하기 -->
<update id="updatePlaylist" parameterType="MyMusic">
	update playlist set 
	l_name=#{l_name}, l_private_yn=#{l_private_yn}, l_image=#{l_image}
	where l_no=#{l_no} and m_id=#{m_id} 
</update>

<!-- 현재 플레이 리스트 확인 -->
<select id="checkPlaylist0" resultType="int">
	select count(*) from playlist
	where m_id=#{m_id} and l_no=0
</select>

<!-- 현재 플레이 리스트 만들기 -->
<insert id="insertPlaylist0">
	insert into playlist 
	(l_no, m_id, l_name)
	values(0, #{m_id}, '현재 플레이리스트')
</insert>

<!-- 현재 플레이 리스트에 노래 담기 -->
<insert id="insertSoundPlaylist0" parameterType="hashmap">
	insert all
	<foreach collection="soundList" item="item" index="index">
		into playlist_content 
			values (0, #{member.m_id}, #{item.s_no},
			#{item.a_no}
			, (select nvl(max(s_order),0)+#{index}+1 from playlist_content 
				where m_id=#{member.m_id} and l_no=0))
	</foreach>
	select * from dual
</insert>

<!-- 현재 플레이 리스트에서 노래 삭제 -->
<delete id="deleteSoundPlaylist0" parameterType="Sound">
	delete from playlist_content
	where m_id=#{m_id} and l_no = 0 and s_no=#{s_no} and a_no=#{a_no} and s_order=#{s_order}
</delete>

<!-- 현재 플레이 리스트에서 노래 삭제 후 s_order 재 설정 -->
<update id="updateSoundOrder" parameterType="Sound">
	update playlist_content set  
	s_order = (s_order-1) 
	where s_order BETWEEN #{s_order} and (select max(s_order) from playlist_content where m_id=#{m_id} and l_no=0)
    and m_id=#{m_id} and l_no=0
</update>

<!-- 현재 플레이 리스트 전부 삭제 -->
<delete id="deleteAllPlaylist0" >
	delete from playlist_content
	where m_id=#{m_id} and l_no = 0
</delete>


</mapper>
